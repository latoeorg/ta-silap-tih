// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  TEACHER
  STUDENT
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String
  role     Role

  studentProfile StudentProfile?
  teacherProfile TeacherProfile?

  teachingCourses Course[]             @relation("TeacherCourses")
  enrolledCourses Course[]             @relation("StudentCourses")
  grades          Grade[]
  attendances     Attendance[]
  schedules       Schedule[]
  gradeRequests   GradeChangeRequest[]
  createdAt       DateTime             @default(now())
}

model StudentProfile {
  id             String    @id @default(uuid())
  email          String    @unique
  user           User      @relation(fields: [email], references: [email])
  role           Role
  profilePicture String?
  number         String? // NIK
  name           String
  birthPlace     String?
  birthDate      DateTime?
  fatherName     String?
  motherName     String?
  address        String?
  gender         String?
  phone          String?
  status         String?   @default("Active")
}

model TeacherProfile {
  id             String    @id @default(uuid())
  email          String    @unique
  user           User      @relation(fields: [email], references: [email])
  role           Role
  profilePicture String?
  number         String? // NIP
  name           String
  titlePrefix    String?
  titleSuffix    String?
  birthPlace     String?
  birthDate      DateTime?
  religion       String?
  gender         String?
  unit           String?
  address        String?
  phone          String?
  status         String?   @default("Active")
}

model Course {
  id          String       @id @default(uuid())
  name        String
  teacherId   String
  teacher     User         @relation("TeacherCourses", fields: [teacherId], references: [id])
  students    User[]       @relation("StudentCourses")
  schedules   Schedule[]
  grades      Grade[]
  attendances Attendance[]
}

model Schedule {
  id        String @id @default(uuid())
  day       String
  startTime String
  endTime   String
  courseId  String
  userId    String
  course    Course @relation(fields: [courseId], references: [id])
  user      User   @relation(fields: [userId], references: [id])
}

model Grade {
  id             String               @id @default(uuid())
  examType       ExamType
  score          Float
  courseId       String
  userId         String
  course         Course               @relation(fields: [courseId], references: [id])
  user           User                 @relation(fields: [userId], references: [id])
  createdAt      DateTime             @default(now())
  changeRequests GradeChangeRequest[]
}

enum ExamType {
  DAILY
  MID_TERM
  FINAL
}

model GradeChangeRequest {
  id        String        @id @default(uuid())
  gradeId   String
  userId    String
  examType  ExamType
  newScore  Float
  reason    String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  grade     Grade         @relation(fields: [gradeId], references: [id])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Attendance {
  id       String           @id @default(uuid())
  date     DateTime
  status   AttendanceStatus
  userId   String
  courseId String
  user     User             @relation(fields: [userId], references: [id])
  course   Course           @relation(fields: [courseId], references: [id])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
  SICK
}
