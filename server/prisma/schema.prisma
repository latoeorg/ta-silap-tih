generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String
  role     Role

  studentProfile StudentProfile?
  teacherProfile TeacherProfile?

  teachingCourses Course[]           @relation("TeacherCourses")
  enrolledCourses Course[]           @relation("StudentCourses")
  grades          Grade[]
  attendances     Attendance[]
  createdWeights  AssessmentWeight[] @relation("CreatedWeights")

  classGroup ClassGroup? @relation("ClassStudents", fields: [classGroupId], references: [id])

  createdAt    DateTime     @default(now())
  classGroupId String?
  ClassGroup   ClassGroup[]
}

model StudentProfile {
  id             String    @id @default(cuid())
  email          String    @unique
  user           User      @relation(fields: [email], references: [email])
  role           Role
  profilePicture String?
  number         String? // NIK
  name           String
  birthPlace     String?
  birthDate      DateTime?
  fatherName     String?
  motherName     String?
  address        String?
  gender         String?
  phone          String?
  status         String?   @default("Active")
}

model TeacherProfile {
  id             String    @id @default(cuid())
  email          String    @unique
  user           User      @relation(fields: [email], references: [email])
  role           Role
  profilePicture String?
  number         String? // NIP
  name           String
  titlePrefix    String?
  titleSuffix    String?
  birthPlace     String?
  birthDate      DateTime?
  religion       String?
  gender         String?
  unit           String?
  address        String?
  phone          String?
  status         String?   @default("Active")
}

model ClassGroup {
  id         String @id @default(cuid())
  name       String // e.g. "Kelas 10 IPA 1"
  homeroomId String
  homeroom   User   @relation(fields: [homeroomId], references: [id])
  students   User[] @relation("ClassStudents")
}

model Subject {
  id      String             @id @default(cuid())
  name    String
  courses Course[]
  weights AssessmentWeight[]
}

model AssessmentWeight {
  id          String   @id @default(cuid())
  subjectId   String
  examType    ExamType
  weight      Float
  quota       Int      @default(1)
  createdById String
  createdBy   User     @relation("CreatedWeights", fields: [createdById], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
}

model Course {
  id          String       @id @default(cuid())
  name        String
  subjectId   String?
  subject     Subject?     @relation(fields: [subjectId], references: [id])
  teacherId   String
  teacher     User         @relation("TeacherCourses", fields: [teacherId], references: [id])
  students    User[]       @relation("StudentCourses")
  grades      Grade[]
  attendances Attendance[]
}

model Grade {
  id         String           @id @default(cuid())
  examType   ExamType
  courseId   String
  userId     String
  course     Course           @relation(fields: [courseId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
  createdAt  DateTime         @default(now())
  components GradeComponent[] // ‚Üê NEW
  totalScore Float? // computed on save
}

model GradeComponent {
  id      String @id @default(cuid())
  gradeId String
  score   Float
  index   Int // e.g. 1st quiz or 2nd quiz (based on quota)
  grade   Grade  @relation(fields: [gradeId], references: [id])
}

enum ExamType {
  DAILY
  MID_TERM
  FINAL
  QUIZ
  ASSIGNMENT
}

model Attendance {
  id       String           @id @default(cuid())
  date     DateTime
  status   AttendanceStatus
  userId   String
  courseId String
  user     User             @relation(fields: [userId], references: [id])
  course   Course           @relation(fields: [courseId], references: [id])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
  SICK
}
